// <auto-generated />
using System;
using Estacionamento_entity.Contexto;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Estacionamentoentity.Migrations
{
    [DbContext(typeof(DbContexto))]
    [Migration("20230105005503_migrations")]
    partial class migrations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Estacionamento_entity.Models.Carro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("MarcaId")
                        .HasColumnType("int")
                        .HasColumnName("marcaId");

                    b.Property<int>("ModeloId")
                        .HasColumnType("int")
                        .HasColumnName("modeloId");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nome");

                    b.HasKey("Id");

                    b.HasIndex("MarcaId");

                    b.HasIndex("ModeloId");

                    b.ToTable("carros");
                });

            modelBuilder.Entity("Estacionamento_entity.Models.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(150)")
                        .HasColumnName("email");

                    b.Property<string>("Endereco")
                        .HasColumnType("text")
                        .HasColumnName("endereco");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nome");

                    b.Property<string>("Telefone")
                        .HasColumnType("varchar(11)")
                        .HasColumnName("telefone");

                    b.HasKey("Id");

                    b.ToTable("clientes");
                });

            modelBuilder.Entity("Estacionamento_entity.Models.Configuracao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DiasDeLocacao")
                        .HasColumnType("int")
                        .HasColumnName("diasDeLocacao");

                    b.HasKey("Id");

                    b.ToTable("configuracoes");
                });

            modelBuilder.Entity("Estacionamento_entity.Models.Marca", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nome");

                    b.HasKey("Id");

                    b.ToTable("marcas");
                });

            modelBuilder.Entity("Estacionamento_entity.Models.Modelo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nome");

                    b.HasKey("Id");

                    b.ToTable("modelos");
                });

            modelBuilder.Entity("Estacionamento_entity.Models.Pedido", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CarroId")
                        .HasColumnType("int")
                        .HasColumnName("carroId");

                    b.Property<int>("ClienteId")
                        .HasColumnType("int")
                        .HasColumnName("clienteId");

                    b.Property<DateOnly>("DataEntrega")
                        .HasColumnType("date")
                        .HasColumnName("DataEntrega");

                    b.Property<DateOnly>("DataLocacao")
                        .HasColumnType("date")
                        .HasColumnName("DataLocacao");

                    b.HasKey("Id");

                    b.HasIndex("CarroId");

                    b.HasIndex("ClienteId");

                    b.ToTable("pedidos");
                });

            modelBuilder.Entity("Estacionamento_entity.Models.Carro", b =>
                {
                    b.HasOne("Estacionamento_entity.Models.Marca", "Marca")
                        .WithMany("Carros")
                        .HasForeignKey("MarcaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Estacionamento_entity.Models.Modelo", "Modelo")
                        .WithMany("Carros")
                        .HasForeignKey("ModeloId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Marca");

                    b.Navigation("Modelo");
                });

            modelBuilder.Entity("Estacionamento_entity.Models.Pedido", b =>
                {
                    b.HasOne("Estacionamento_entity.Models.Carro", "Carro")
                        .WithMany("Pedidos")
                        .HasForeignKey("CarroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Estacionamento_entity.Models.Cliente", "Cliente")
                        .WithMany("Pedidos")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Carro");

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("Estacionamento_entity.Models.Carro", b =>
                {
                    b.Navigation("Pedidos");
                });

            modelBuilder.Entity("Estacionamento_entity.Models.Cliente", b =>
                {
                    b.Navigation("Pedidos");
                });

            modelBuilder.Entity("Estacionamento_entity.Models.Marca", b =>
                {
                    b.Navigation("Carros");
                });

            modelBuilder.Entity("Estacionamento_entity.Models.Modelo", b =>
                {
                    b.Navigation("Carros");
                });
#pragma warning restore 612, 618
        }
    }
}
